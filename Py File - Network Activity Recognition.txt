import numpy as np
import pandas as pd
np.version.version
from sklearn.datasets import load_svmlight_files
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.model_selection import train_test_split

from pip._internal import main
#main(['install', 'xgboost'])
!pip install xgboost
!pip install imblearn

from xgboost.sklearn import XGBClassifier
dataset = pd.read_csv("cybersecurity_train.csv")

columns = dataset.columns.tolist();
columns = [c for c in columns if c not in ["notified"]]
target = "notified"
state = np.random.RandomState(42)
X = dataset[columns]
Y = dataset[target]
X_outliners = state.uniform(low=0, high=1, size=(X.shape[0], X.shape[1]))


print(X.shape)
print(Y.shape)

from imblearn import under_sampling
from imblearn.under_sampling import NearMiss

nm = NearMiss(random_state=42)
X_res, y_res = nm.fit_sample(X,Y)

from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report,confusion_matrix
X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2, random_state = 42)
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

rfc = RandomForestClassifier(n_estimators=400)
rfc.fit(X_train, y_train)
pred_rfc = rfc.predict(X_test)

print(classification_report(y_test, pred_rfc))
print(confusion_matrix(y_test, pred_rfc))

def plot_roc_curve(fpr, tpr):
    plt.plot(fpr, tpr, color='orange', label='ROC')
    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend()
    plt.show()

from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report

auc = roc_auc_score(y_test, pred_rfc)
print('AUC: %.2f' % auc)
fpr, tpr, thresholds = roc_curve(y_test, pred_rfc)
plot_roc_curve(fpr, tpr)